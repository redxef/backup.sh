# Example configuration.
# This config will create a full backup every year, as early as possible.
# Additionally there will be an incremental backup every month like so:
# yearxxxx -> jan -> feb -> ... -> dec
# Every week (based on the Calendar Week) a weekly backup is made, which
# uses the newest monthly backup as base.
# Additionally there is an always target, which runs anytime, no matter what.
# Supported configurations:
# type=full|incremental
#   either create a full backup (and thus ignore the
#   `incremental_match_base' and `incremental_match_base_alt' options) or
#   create a incremental backup, the base dump will be decided by the
#   aforementioned options, which will take a regular expression. If no file
#   is found using the `incremental_match_base' regex the alternative regex
#   is used to try and find a file. The newest file matching the regeular
#   expression will be used.
# incremental_match_base(_alt)=regex
#   Takes a regular expression which matches the filename of a data dump.
#   the format of the file name is:
#      b{NAME_OF_TARGET}_{ISO8601},{CALENDAR_WEEK}.{WEEK_DAY_NUMBER}
#   where ISO8601 is the output of `date -Iseconds' and
#   {CALENDAR_WEEK}.{WEEK_DAY_NUMBER} is the output of date '+%V.%u'.
#   The patterns can have the following substitutions:
#      %TN      the taget's name
#      %%       an actual %
#      %YYYY    current year
#      %MM      current month
#      %DD      current day
#      %hh      current hour
#      %mm      current minute
#      %ss      current second
#      %TZ      local timezone offset
#      %CW      the calendar week number
#      %WD      current week day (1..7) Monday to Sunday
#      %self    the complete filename which would be generated by the program
#   See type for usage.
# match_exist_name=regex
#   Also matches against filenames and follows the same rules as
#   incremental_match_base. If any file matches this pattern, then the target
#   is considered satisfied and no further action is done.
# match_name=regex
#   See incremental_match_base for file format. If the generated name of the
#   program matches this regex an archive will be created, this is as of now
#   only useful for enabling or disabling (no regex) this target.
# directory=dir
#   The directory to back up using this target. Be careful when making
#   incremental backups between different targets, which might have
#   different directories set.

# Example archive name: bMONTHLY_2020-02-26T16:13:11+01:00,09.3.tar.bz2


[YEARLY]
type=full
match_exist_name=b%TN_%YYYY.*
match_name=b%TN_%YYYY.*
directory=test/

[MONTHLY]
type=incremental
incremental_match_base=b\(YEARLY\|%TN\)_%YYYY.*
incremental_match_base_alt=

# available substitutions for the following regexes (current):
# TN, %, YYYY, MM, DD, hh, mm, ss, TZ, CW, WD

# if the following regex matches any file, dont create the backup
match_exist_name=b%TN_%YYYY-%MM.*
# if this regex matches the generated name, make a backup
match_name=b%TN_%YYYY-%MM.*
# make a backup of test/
directory=test/

[WEEKLY]
type=incremental
incremental_match_base=bMONTHLY_%YYYY.* # sed-style regex
incremental_match_base_alt=bYEARLY_%YYYY.*
match_exist_name=b%TN_%YYYY.*,%CW\..*
match_name=b%TN_%YYYY.*,%CW\..*
directory=test/

[DAILY]
type=incremental
incremental_match_base=bWEEKLY_%YYYY.*,%CW\..*
incremental_match_base_alt=
match_exist_name=b%TN_%YYYY.*,%CW\.%WD.*
match_name=b%TN_%YYYY.*,%CW\.%WD.*
directory=test/

[ALWAYS]
type=incremental
incremental_match_base=bWEEKLY.*
match_exist_name=%self
match_name=.*
directory=test/

[END] # special end tag, can actually be anything of the form \[[a-zA-Z]*\]
      # this is needed because of the way targets are read.
